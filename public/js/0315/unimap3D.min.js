// version:1.0        author:sunzq        Email:zengqiang365@163.com
//////////////////////////////////////////////////////////////////////////////////////
//初始化viewer，option选项{satelliteMapUrl, streetMapUrl, terrainMapUrl}
function initViewer(y, M, N, e) {
  function O() {
    for (var a = [], b = 0; 15 > b; b++) a.push("/data/gmp/gmp-level" + b +
      ".json");
    var a = Promise.map(a, function(a, b) {
        return Cesium.loadJson(a).then(function(a) {
          z[b] = a[0].data;
          return z
        })
      }),
      b = Cesium.loadJson("/data/coordinate/lat.json").then(function(a) {
        m = a.XLAT;
        n = _.chunk(m, 194)

        console.log(m);
        console.log("vertical_latGrid");
        console.log(n);

        return n;
      }),
      f = Cesium.loadJson("/data/coordinate/long.json").then(function(a) {
        p = a.XLONG;
        return q = _.chunk(p, 194)

      });
    return Promise.all([b, f, a])
  }

  function I(a) {
    for (var b = 0; b < a; b++) {
      var f = new Cesium.CustomDataSource("level-" + b);
      c.dataSources.add(f)
    }
  }

  function A() {
    var a = [];
    c.dataSources._dataSources.forEach(function(b) {
      0 == b.name.indexOf("level") && a.push(b)
    });
    return a
  }

  function P() {
    A().forEach(function(a) {
      c.dataSources.remove(a)
    })
  }

  function J() {
    k = new Cesium.CustomDataSource("pblh");
    c.dataSources.add(k);
    k.show = t;
    var a = d.time.utc().format("YYYY-MM-DD_HH") + "-";
    Cesium.loadJson(d.dataServerAddr + "/data/pollute/2015052506/pblh/" + a +
      "PBLH.json").then(function(a) {
      a = a[0].data;
      for (var b = k.entities, g = 0; g < a.length - 194; g++)
        if (0 != (g - 193) % 194) {
          var d = 100 * a[g];
          b.add({
            rectangle: {
              coordinates: Cesium.Rectangle.fromDegrees(p[g], m[g], p[g +
                195], m[g + 195]),
              height: d,
              material: Cesium.Color.NAVY.withAlpha(.2)
            }
          })
        }
    }).otherwise(function(a) {
      console.log(a)
    })
  }

  function B() {
    var a = colortable.getColorScale(d.color);
    if (a) {
      var b = h.valueRange.min,
        f = h.valueRange.max;
      return function(g) {
        var d = a((g - b) / (f - b)),
          d = new Cesium.Color.fromCssColorString(d);
        g = h.alphaScale(g);
        return new Cesium.Color.fromAlpha(d, g)
      }
    }
    return function(a) {
      return h.color(a)
    }
  }

  function Q(a) {
    var b, f = "level-" + a;
    c.dataSources._dataSources.forEach(function(a) {
      f == a.name && (b = a)
    });
    return b
  }

  function C() {
    P();
    I(h.levelNum);
    K()
  }
  y = y.replace("#", "");
  var u, L, D;
  u = "satelliteMapUrl" in e ? new Cesium.UrlTemplateImageryProvider({
    url: e.satelliteMapUrl,
    maximumLevel: 7
  }) : void 0;
  L = "streetMapUrl" in e ? new Cesium.UrlTemplateImageryProvider({
    url: e.streetMapUrl,
    maximumLevel: 7
  }) : Cesium.createOpenStreetMapImageryProvider({
    url: "https://a.tile.openstreetmap.org/"
  });
  D = "terrainMapUrl" in e ? new Cesium.CesiumTerrainProvider({
    url: e.terrainMapUrl
  }) : new Cesium.VRTheWorldTerrainProvider({
    url: "http://www.vr-theworld.com/vr-theworld/tiles1.0.0/73/",
    credit: "Terrain data courtesy VT M\u00c4K"
  });
  var c = new Cesium.Viewer(y, {
    animation: !1,
    timeline: !1,
    vrButton: !1,
    fullscreenButton: !1,
    geocoder: !1,
    homeButton: !1,
    infoBox: !1,
    sceneModePicker: !0,
    selectionIndicator: !1,
    navigationHelpButton: !1,
    baseLayerPicker: !1,
    imageryProvider: u,
    terrainExaggeration: 40,
    useDefaultRenderLoop: !0,
    targetFrameRate: void 0,
    showRenderLoopErrors: !1,
    automaticallyTrackDataSourceClocks: !0,
    contextOptions: void 0,
    sceneMode: Cesium.SceneMode.SCENE3D,
    mapProjection: new Cesium.WebMercatorProjection,
    dataSources: new Cesium.DataSourceCollection
  });
  c.terrainProvider = D;
  c._cesiumWidget._creditContainer.style.display = "none";
  var r = c.imageryLayers;
  satelliteLayer = u ? new Cesium.ImageryLayer(u) : r.get(0);
  satelliteLayer.name = "\u536b\u661f+\u5730\u5f62";
  streetLayer = new Cesium.ImageryLayer(L);
  streetLayer.name = "\u5730\u56fe";
  var d = {
      overlayType: "defaultOverlay" in e ? e.defaultOverlay : "pm2_5",
      dataServerAddr: M,
      imageServerAddr: N,
      color: "\u6807\u51c6",
      realHeight: "realHeight" in e ? e.realHeight : !0,
      time: moment.utc("2017-02-25 23:00:00")
    },
    z = Array(15),
    m = [],
    p = [],
    q, n, v, w, h = products.productsFor(d);
  I(h.levelNum);
  var k, t = !1,
    K = function() {
      h.paths().forEach(function(a, b) {
        (function(a, b) {
          var f = d.time.utc().format("YYYY-MM-DD_HH") + "-";
          Cesium.loadJson(d.dataServerAddr + "/data/pollute/2015052506/" +
            f + a).then(function(a) {
            a = h.data(a);
            for (var f = 5E4 * b, g = Q(b).entities, l = h.valueRange
                .min, c = B(), e = 0; e < a.data.length; e++) {
              var G = a.data[e];
              if (G >= l) {
                d.realHeight && (f = 100 * z[b][e]);
                var H = m[e],
                  k = p[e];
                g.add({
                  value: {
                    value: G,
                    lon: k,
                    lat: H
                  },
                  name: "",
                  position: Cesium.Cartesian3.fromDegrees(k, H, f),
                  box: {
                    dimensions: new Cesium.Cartesian3(26E3, 27E3,
                      27E3),
                    material: c(G)
                  }
                })
              }
            }
          }).otherwise(function(a) {
            console.log(a)
          })
        })(a, b)
      })
    };
  return {
    getConfig: function() {
      return d
    },
    setFocus: function(a, b, f) {
      c.camera.setView({
        destination: Cesium.Cartesian3.fromDegrees(a, b, f)
      });
      c.scene.morphComplete.addEventListener(function() {
        setTimeout(function() {
          c.camera.flyTo({
            destination: Cesium.Cartesian3.fromDegrees(a, b, f)
          })
        }, 500)
      })
    },
    buildImagePath: function(a, b) {
      return d.dataServerAddr + "/data" +
        "/2017-05-19T090000bottom_top(05)pm25.png";
      // return d.imageServerAddr + "overlay\x3d" + d.overlayType +
      //   "\x26verticaltype\x3d" + a + "\x26time\x3d" + d.time.format(
      //     "YYYY-MM-DD_HH") + "\x26num\x3d" + b
    },
    setLonEntPosition: function(a) {
      v.wall.positions = Cesium.Cartesian3.fromDegreesArray([q[0][a], 10, q[
        193][a], 53])
    },
    setLatEntPosition: function(a) {
      w.wall.positions = Cesium.Cartesian3.fromDegreesArray([73, n[a][0], 135,
        n[a][0]
      ])
    },
    changeMap: function(a) {
      "streetMap" == a ? (c.terrainProvider = new Cesium.EllipsoidTerrainProvider,
        r.remove(satelliteLayer, !1), r.add(streetLayer), d.realHeight = !1
      ) : (c.terrainProvider = D, r.remove(streetLayer, !1), r.add(
        satelliteLayer), d.realHeight = !0);
      C()
    },
    getPixColorScale: B,
    reloadData: C,
    setDate: function(a) {
      d.time.add(a, "h");
      C();
      t && (c.dataSources.remove(k), J())
    },
    renderColorScale: function(a, b) {
      d.color = a;
      var f = colortable.getColorScale(a),
        e = f ? f : h.colorScale,
        c = f ? {
          min: 0,
          max: 1
        } : h.valueRange,
        l = b.node(),
        k = l.width,
        f = l.height,
        l = l.getContext("2d"),
        E = k - 1;
      l.clearRect(0, 0, k, f);
      for (var k = c.min, c = c.max, x = 0; x <= E; x++) {
        var F = d3.rgb(e(x / E * (c - k) + k));
        l.fillStyle = "rgb(" + F.r + "," + F.g + "," + F.b + ")";
        l.fillRect(x, 0, 1, f)
      }
      b.on("mousemove", function() {
        var a = d3.mouse(this)[0],
          f = h.valueRange.min,
          a = (Math.max(0, Math.min((Math.round(a) - 2) / (E - 2), 1)) *
            (h.valueRange.max - f) + f).toFixed(2);
        b.attr("title", a + " " + h.units[0].label)
      })
    },
    recolor: function() {
      var a = B();
      A().forEach(function(b) {
        b.entities.values.forEach(function(b) {
          b.box.material.color = a(b.value.value)
        })
      })
    },
    setVerticalShow: function() {
      w.show = !0;
      v.show = !0
    },
    setVerticalHide: function() {
      w.show = !1;
      v.show = !1
    },
    setShowRange: function(a) {
      var b = a.latRange,
        f = a.lonRange,
        c = a.heightRange,
        e = a.valRange;
      "temp" == d.overlayType && (e = [parseFloat(e[0]) + 273.15, parseFloat(
        e[1]) + 273.15]);
      A().forEach(function(a) {
        var d = parseInt(a.name.split("-")[1]) + 1;
        d >= c[0] && d <= c[1] ? (a.show = !0, a = a.entities, a.suspendEvents(),
          a.values.forEach(function(a, c, d) {
            c = a.value.lat;
            d = a.value.lon;
            var h = a.value.value,
              g = !0;
            if (c <= b[0] || c >= b[1]) g = !1;
            if (d <= f[0] || d >= f[1]) g = !1;
            if (h <= e[0] || h >= e[1]) g = !1;
            a.show = g ? !0 : !1
          }), a.resumeEvents()) : a.show = !1
      })
    },
    setOverlay: function(a) {
      d.overlayType = a;
      h = products.productsFor(d)
    },
    getOverlay: function() {
      return h
    },
    showPBLH: function() {
      t = !0;
      J()
    },
    hidePBLH: function() {
      t = !1;
      c.dataSources.remove(k)
    },
    start: function() {
      O().then(function() {
        var a = "defaultLatEnt" in e ? e.defaultLatEnt : 100;
        w = c.entities.add({
          show: !1,
          name: "vertical-lat",
          wall: {
            positions: Cesium.Cartesian3.fromDegreesArray([73, n[a][0],
              135, n[a][0]
            ]),
            maximumHeights: [2E5, 2E5],
            minimumHeights: [0, 0],
            material: Cesium.Color.fromAlpha(Cesium.Color.DEEPSKYBLUE,
              .7)
          }
        });
        a = "defaultLonEnt" in e ? e.defaultLonEnt : 119;
        v = c.entities.add({
          show: !1,
          name: "vertical-long",
          wall: {
            positions: Cesium.Cartesian3.fromDegreesArray([q[0][a],
              10, q[193][a], 53
            ]),
            maximumHeights: [2E5, 2E5],
            minimumHeights: [0, 0],
            material: Cesium.Color.fromAlpha(Cesium.Color.DEEPSKYBLUE,
              .7)
          }
        });
        K()
      })
    }
  }
};
